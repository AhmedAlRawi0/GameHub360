namespace ca.mcgill.ecse321.GameShop.model;

/* Since we are only developing one game shop system, the root class is unnecessary. Solution: remove the root class (as per the tutorial.)
class GameShop
{
  1 <@>- * CustomerAccount customerAccount;
  1 <@>- * EmployeeAccount employeeAccount;
  * <@>- 1 ManagerAccount managerAccount; //(if singleton attribute is added) If I remove the 0..1, there will be a warning related to they keyword singleton;
  1 <@>- * GameCategory gameCategory;
  1 <@>- * Game game;
  1 <@>- * GameRequest gameRequest;
  1 <@>- * Order order;
  * <@>- 1 StoreInformation storeInformation;// (if singleton attribute is added) If I remove the 0..1, there will be a warning related to they keyword singleton;
  1 <@>- * Review review; //TBC: it's an association class so there should not be multiplicity, but let's try.
}
// I have removed Boolean + singleton attrs as they were causing many errors.
*/

class Account {
abstract; 
immutable email; //Apparently I am unable to to add two properties here if I add String and unique...
String password;
lazy String name;
lazy String phoneNumber;
}

class CustomerAccount {
  isA Account;
  1 cardOwner <@>- * PaymentInformation paymentCards;
}

class StaffAccount {
  isA Account;
}

class EmployeeAccount {
  isA StaffAccount;
  1 employee <@>- * ActivityLog logs;
  isActive;
}

class ManagerAccount {
  isA StaffAccount;
  //singleton;
}

class ActivityLog {
  String content;
}

class RequestNote {
  String content;
  Date date;
}

class PaymentInformation {
  String cardName;
  String postalCode;
  Integer cardNumber;
  Integer expMonth;
  Integer expYear;
}

class Order {
  enum OrderStatus {SHIPPING, DELIVERED, RETURNED}
  lazy OrderStatus orderStatus;
  Date date;
}

class Game {
  isA GameInformation; //this does not make sense... saying that "Game is a GameInformation does not make sense", we need to re-look at this.
  Integer quantityInStock;
   isAvailable;
  Integer price; 
}

class GameRequest {
  isA GameInformation; // isA does not make sense here too...
  1 gameRequest <@>- * RequestNote requestNotes;

  enum RequestStatus {SUBMITTED, APPROVED, REFUSED}
  lazy RequestStatus requestStatus;
  Date date;
}

class GameInformation {
  abstract;
  String name;
  String description;
  String imageURL;
  String nameOfX; //Duplicate attribute in the DM, I added OfX
}

class GameCategory {
  enum CategoryType {GENRE, CONSOLE}
  lazy CategoryType categoryType;
   isAvailable;
  String name;
}

class Promotion {
  enum PromotionType {GAME, CATEGORY}
  lazy PromotionType promotionType;
  Double discountPercentageValue;
}

class StoreInformation {
  //singleton;
  1 info <@>- * Promotion promotion; //might need a better role name here
  lazy String storePolicy; //lazy keyword has to be added due to the singleton keyword, if we end up having it
}

associationClass Review {
  //Not entirely sure about the multiplicites here, has to be checked as it's a bit improper on Umple.
  0..1 CustomerAccount customerAccount;
  0..1 Order order;

  // the Composition relation with ReviewReply is in the association section, if I added here (like other ones) it will cause an error

  enum GameReviewRating {ONE_STAR, TWO_STARS, THREE_STARS, FOUR_STARS, FIVE_STARS}
  lazy GameReviewRating rating;
  lazy String comment;
  Date date;
}

class ReviewReply {
  String content;
  Date date;
}

association {
1 Review review <@>- * ReviewReply replies; //Composition relationship
1 CustomerAccount orderedBy -- * Order orderHistory;
* CustomerAccount inWishList -- * Game wishListedGame;
1 PaymentInformation paymentInformation -- * Order orderPayedWith;
* Order order -- 1..* Game game;
* Promotion promotions -- * Game promotedGames;
* Promotion promotions -- * GameCategory promotedCategories;
* GameInformation games -- 1..* GameCategory categories;
1 EmployeeAccount requestPlacer -- * GameRequest request; // I replaced role "author" with "requestPlacer"
1 ManagerAccount reviewr -- * ReviewReply reviewReplies; // I replaced role "author" with "reviewer"
1 StaffAccount notesWriter -- 1..* RequestNote writtenNotes; // I replaced role "author" with "notesWriter"
}